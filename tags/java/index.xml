<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Your title</title>
    <link>https://qmr0925.github.io/tags/java/</link>
    <description>Recent content in Java on Your title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Dec 2020 10:43:22 +0800</lastBuildDate>
    
	<atom:link href="https://qmr0925.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Refection</title>
      <link>https://qmr0925.github.io/program/reflection/</link>
      <pubDate>Tue, 01 Dec 2020 10:43:22 +0800</pubDate>
      
      <guid>https://qmr0925.github.io/program/reflection/</guid>
      <description>一、Java反射机制概述  被视为动态语言的关键，反射机制允许程序在执行期间，借助于Reflection API取得任何类的内部信息，并能直接操作任意操作对象的内部属性及方法。 原理解释：加载完类之后，在堆内存区产生了一个Class类型的对象（一个类只有一个Class对象），这个对象包含了完整的类的结构信息，我们可以通过这个对象看到类的结构。
 1、动态语言与静态语言  动态语言：在运行时可以改变其结构的语言。包括Object-C C#，Javascript，PHP，Python， 静态语言：运行时结构不可变的语言就是静态语言。包括Java，C，C++等 JAVA被称为“准动态语言”，因为Java可以利用反射机制，字节码操作等得到类似动态语言的特性。
 二、反射机制的作用  1、在运行时判断任意一个对象所属于的类 2、在运行时构造任意一个类的对象 3、在运行时判断或调用任意一个类所具有的成员变量和方法 4、在运行时获取泛型信息 5、在运行时处理注解 6、生成动态代理  二、反射相关的主要API  java.lang.Class:代表一个类 java.lang.reflect.Method:代表类的方法 java.lang.reflect.Field:代表类的成员变量 java.lang.reflect.Constructor:代表类的构造器 使用示例：   1、关于java.lang.Class类的理解 (1)类的加载过程： 程序经过javac.exe命令后，会生成一个或多个字节码文件（.class结尾）。java.exe命令对某个字节码文件进行解释运行。相当与将某个字节码文件加载到内存中，此过程称为类的加载。加载到内存中的类，我们就称为运行时类，就作为Class的一个实例。 换句话说，Class的实例就对应着一个运行时类 补充：java中的类也是对象，是Class的对象 加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类（它们获取的是同一个运行时类）。
  (2)获取Class的实例的方式： 调用运行时类的属性 .class 通过运行时类的对象 调用getClass 调用Class的静态方法：forName（String classPath） 补充：使用类的加载器：ClassLoader   (3)关于ClassLoader的理解： 作用：把类装载进入内存 分类：引导类加载器（复杂Java核心库的加载）、系统类加载器（最常用的加载器），扩展类加载器（加载jre/lib/ext目录下的jar包） 使用ClassLoader读取配置文件   (3)创建运行时类的对象： newInstance():调用此方法，创建对应运行时类的对象。内部调用了运行时类的空参的构造器。
 要想此方法正常创建运行时类的对象，要求：运行时类必须提供权限足够的空参构造器 在javaBean中要求提供一个public的空参构造器。&amp;raquo;原因：便于通过反射，创建运行时类的对象。便于子类继承此运行时类时，默认调用super()时，保证父类有次构造器。   三、反射机制的一些问题  1、反射机制与面向对象的封装性 两个技术不矛盾，封装性解决的是建议你是否使用私有方法。反射机制解决的是能不能调用的问题。
2、在开发过程中什么时候使用new对象，什么时候使用反射的方式去调用公共的结构 编译的时候不知道使用哪一个类，使用反射的方式
  ​</description>
    </item>
    
    <item>
      <title>Java中的ArrayDeque和LinkedList的使用</title>
      <link>https://qmr0925.github.io/datastructure/deque_linked/</link>
      <pubDate>Tue, 10 Dec 2019 16:10:36 +0800</pubDate>
      
      <guid>https://qmr0925.github.io/datastructure/deque_linked/</guid>
      <description>Java中的ArrayDeque和LinkedList的使用   在Java的集合框架中，ArrayDeque和LinkdedList是实现栈和队列的两种不同方式，那么应该如何使用，
 才能使自己构造的数据结构解决问题时性能更好呢，先上一张继承关系表 
 从上图中我们可以看到，ArrayDeque是继承于Deque接口，LinkedList继承于List接口和Deque接口，看
 起来功能要更加强大，那么我们从几个方面来进行比较
 从这张表格可以看出ArrayDeque和LinkedList的主要区别就是数组和链表的区别，二者都能用作双向队列、
 栈；但是使用ArrayDeque当数据不断插入时，底层数组可能扩容，对性能的影响是比较大的；LinkedList底层
是使用的双向链表，不存在扩容的问题，但由于链表，占用的存储空间更大。二者各有优劣，所以综合来看：
  当做队列或栈使用并且数据量比较少时，使用ArrayDeque，占用的存储空间更小
  当做队列或栈使用并且数据量很大时，使用LinkjedList，这样不用扩容对性能的影响
  当需要随机访问时，使用ArrayDeque，数组有先天的优势
  </description>
    </item>
    
    <item>
      <title>数据结构之容器</title>
      <link>https://qmr0925.github.io/datastructure/container/</link>
      <pubDate>Thu, 28 Nov 2019 17:01:10 +0800</pubDate>
      
      <guid>https://qmr0925.github.io/datastructure/container/</guid>
      <description>一、概述 1.什么是数据结构中的容器？  容器是一种把多个元素组织在一起的数据结构，也可以理解为一种可以包含其他类型对象作为元素的
 的对象。容器是仅仅用来存放数据的，本身没有取出元素这种能力，大多数情况下是通过可迭代对象来
操作容器
 容器这种数据结构在各种编程语言中都有相应的实现，比如我们经常会比较熟悉的C++的标准模板库
 （Standard Template Library，STL）、Java的集合框架（Java Collections Framework，JCF）、而在
Python中更是将容器类型的数据结构作为其基本数据类型、Go语言也有内建的容器和相应的标准库，
本篇博客便是在总结各种容器使用及原理的基础上，对Java、Python中相同的类型的容器做一个横向的
对比，以便于日后的总结和复习
2.Java集合框架简介  （1）泛型的机制
  Java中的容器就是可以容纳其他Java对象的对象，且Java容器中只能存放对象，对于一些基本的数据
 类型（比如int、long、float、double等），需要将其包装成对象类型之后（Interger、Long、Float、Double
等）才能放到容器里，很多时候拆包装和解包装使能够自动完成的
 Java容器能够容纳任何类型的对象，表面上是通过泛型机制完成的。事实上，所有容器的内部存放的都
 是Object类的对象，所有的对象都是Object类型的子类。泛型机制只是简化了编程，由编译器自动帮助我们
完成了强制类型的转换而已，示例代码如下
ArrayList&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;(); //参数化类型 list.add(new String(&amp;#34;csuyzz&amp;#34;)); String name = list,get(0); //容器中存放的Object类的对象隐式转换成为String类型的对象  此外，Java里的对象都在堆上，且对象只能通过引用（reference）来访问，容器里存放的其实是对
 象的引用而不是对象的本身
 （2）接口和实现（Interfaces and Implementations）
  在Java 的集合框架中共定义了14种容器的接口，关系图如下所示，Map接口没有继承自Collection的
 接口，因为Map接口是关联式的容器而不是集合，但也可以从Map转换到Coolection；Stack已经被Deque
所取代

 接口的实现如下表所示
  迭代器为我们提供了遍历容器中元素的方法，它只能通过容器本身来得到，迭代器是我们更加方便地去操作
 容器，下面是示例：
ArrayList&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;(); list.</description>
    </item>
    
    <item>
      <title>常见数据结构的定义</title>
      <link>https://qmr0925.github.io/datastructure/defindatastructure/</link>
      <pubDate>Fri, 15 Nov 2019 14:01:10 +0800</pubDate>
      
      <guid>https://qmr0925.github.io/datastructure/defindatastructure/</guid>
      <description>常见数据结构的定义 一、链表（以singly-linked list为例） 1.Java public class ListNode{ int val; ListNode next; //如果是双向链表，则会为left or right  ListNode(int x) { val = x; next = null; } } 2.Python class ListNode: def __init__(self,x): self.val = x self.next = Node 3.C struct ListNode{ int val; struct ListNode *next; }; 4.Go type ListNode struct{ Val int Next *ListNode } 二、二叉树（Binary Tree Node） 1.Java //Definition for a binary tree node public class TreeNode{ int val; TreeNode left; TreeNode right; TreeNode(int x){val = x;} } 2.</description>
    </item>
    
  </channel>
</rss>