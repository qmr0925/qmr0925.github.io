<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programs on Your title</title>
    <link>https://qmr0925.github.io/program/</link>
    <description>Recent content in Programs on Your title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Dec 2020 13:16:10 +0800</lastBuildDate>
    
	<atom:link href="https://qmr0925.github.io/program/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>异常处理</title>
      <link>https://qmr0925.github.io/program/exception/</link>
      <pubDate>Thu, 03 Dec 2020 13:16:10 +0800</pubDate>
      
      <guid>https://qmr0925.github.io/program/exception/</guid>
      <description>一、异常概述  异常：在java语言中，将程序执行中发生的不正常情况称为“异常”（开发过程中的语法错误和逻辑错误不叫异常。 异常事件可以分为以下几类：
  1、Error   Java虚拟机无法解决的严重问题。如：JVM系统内部错误，资源耗尽等严重情况。比如：Stackoverflow。 一般不写代码进行处理。 实例：   2、Exception 其他因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码处理。例如：
 (1)空指针访问 (2)试图读取不存在的文件 (3)网络连接中断 (4)数组角标越界    ​</description>
    </item>
    
    <item>
      <title>Refection</title>
      <link>https://qmr0925.github.io/program/reflection/</link>
      <pubDate>Tue, 01 Dec 2020 10:43:22 +0800</pubDate>
      
      <guid>https://qmr0925.github.io/program/reflection/</guid>
      <description>一、Java反射机制概述  被视为动态语言的关键，反射机制允许程序在执行期间，借助于Reflection API取得任何类的内部信息，并能直接操作任意操作对象的内部属性及方法。 原理解释：加载完类之后，在堆内存区产生了一个Class类型的对象（一个类只有一个Class对象），这个对象包含了完整的类的结构信息，我们可以通过这个对象看到类的结构。
 1、动态语言与静态语言  动态语言：在运行时可以改变其结构的语言。包括Object-C C#，Javascript，PHP，Python， 静态语言：运行时结构不可变的语言就是静态语言。包括Java，C，C++等 JAVA被称为“准动态语言”，因为Java可以利用反射机制，字节码操作等得到类似动态语言的特性。
 二、反射机制的作用  1、在运行时判断任意一个对象所属于的类 2、在运行时构造任意一个类的对象 3、在运行时判断或调用任意一个类所具有的成员变量和方法 4、在运行时获取泛型信息 5、在运行时处理注解 6、生成动态代理  二、反射相关的主要API  java.lang.Class:代表一个类 java.lang.reflect.Method:代表类的方法 java.lang.reflect.Field:代表类的成员变量 java.lang.reflect.Constructor:代表类的构造器 使用示例：   1、关于java.lang.Class类的理解 (1)类的加载过程： 程序经过javac.exe命令后，会生成一个或多个字节码文件（.class结尾）。java.exe命令对某个字节码文件进行解释运行。相当与将某个字节码文件加载到内存中，此过程称为类的加载。加载到内存中的类，我们就称为运行时类，就作为Class的一个实例。 换句话说，Class的实例就对应着一个运行时类 补充：java中的类也是对象，是Class的对象 加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类（它们获取的是同一个运行时类）。
  (2)获取Class的实例的方式： 调用运行时类的属性 .class 通过运行时类的对象 调用getClass 调用Class的静态方法：forName（String classPath） 补充：使用类的加载器：ClassLoader   (3)关于ClassLoader的理解： 作用：把类装载进入内存 分类：引导类加载器（复杂Java核心库的加载）、系统类加载器（最常用的加载器），扩展类加载器（加载jre/lib/ext目录下的jar包） 使用ClassLoader读取配置文件   (3)创建运行时类的对象： newInstance():调用此方法，创建对应运行时类的对象。内部调用了运行时类的空参的构造器。
 要想此方法正常创建运行时类的对象，要求：运行时类必须提供权限足够的空参构造器 在javaBean中要求提供一个public的空参构造器。&amp;raquo;原因：便于通过反射，创建运行时类的对象。便于子类继承此运行时类时，默认调用super()时，保证父类有次构造器。   三、反射机制的一些问题  1、反射机制与面向对象的封装性 两个技术不矛盾，封装性解决的是建议你是否使用私有方法。反射机制解决的是能不能调用的问题。
2、在开发过程中什么时候使用new对象，什么时候使用反射的方式去调用公共的结构 编译的时候不知道使用哪一个类，使用反射的方式
  ​</description>
    </item>
    
  </channel>
</rss>